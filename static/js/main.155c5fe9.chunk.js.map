{"version":3,"sources":["Assets/Styles/Global.styled.js","Assets/Styles/AppContainer.styled.js","Components/Board/LocalBoard/LocalBoard.styled.js","Components/Board/LocalBoard/LocalBoard.jsx","Components/Board/Board.styled.js","Components/Board/BoardUtils.js","Components/Board/Board.jsx","Components/Board/GlobalBoard/GlobalBoard.jsx","Components/UI/Button/Button.styled.js","Components/UI/Button/Button.jsx","Components/Header/Header.styled.js","Components/Header/Header.jsx","Components/UI/Modal/Modal.styled.js","Components/Modals/HighScoresModal/HighScoresModal.styled.js","Components/Modals/HighScoresModal/HighScoresModalTableRow.style.js","Components/Modals/HighScoresModal/HighScoresModalTableRow.jsx","Components/Modals/HighScoresModal/HighScoresModal.jsx","Components/UI/Modal/Modal.js","Components/Game/Game.styled.js","Components/Game/Game.constants.js","Components/Game/Game.jsx","Components/Game/Game.utils.js","Utils/Constants.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","AppContainer","styled","div","LocalBoardCell","val","isClickable","LocalBoard","props","value","className","onClick","StyledBoard","boardType","wonBoard","winner","BoardRow","getBoardRows","board","size","rows","Array","map","item","i","cols","j","Board","boardInfo","type","GlobalBoard","idx","localBoards","getLocalBoard","isWon","length","player","StyledButton","button","styles","bg","disabled","color","Button","children","OuterContainer","InnerContainer","NextPlayer","Header","onNewGameClick","onHighScoresClick","StyledModal","ModalHeader","header","ModalBody","section","ModalFooter","footer","ModalTitle","hs","ModalInputLabel","label","ModalInput","input","Backdrop","ModalBodyForm","form","HighScoresModalTable","table","StyledHighScoresModalTableRow","tr","isNew","HighScoresModalTableRow","rank","name","score","HighScoresModal","newPlayer","addedPlayerIdx","findIndex","tableHeaders","tableBody","ModalOverlay","useState","playerName","setPlayerName","playerScore","setPlayerScore","modal","body","onSubmit","event","preventDefault","playerToAdd","onSubmitName","htmlFor","id","onChange","target","trim","Modal","ReactDom","createPortal","document","getElementById","BoardContainer","highScoresMockData","Game","setBoard","setPlayer","clickedBoards","setClickedBoards","playableBoards","setPlayableBoards","unfilledBoards","setUnfilledBoards","wonBoards","setWonBoards","setModal","X","O","movesCount","setMovesCount","highScores","setHighScores","winningPatterns","patterns","mainDiagonalPattern","antiDiagonalPattern","rowPattern","colPattern","push","getWinningPatterns","initBoard","Math","pow","fill","getBoardIdxs","keys","useEffect","JSON","parse","localStorage","getItem","checkLocalWin","setDraw","isLocalBoardFull","setAvailableBoards","checkGlobalWin","setLocalStorageHighScores","isNewGame","globalSqIdx","isWinningPattern","forEach","pattern","every","some","setWin","availableIdxs","filter","aIdx","updateBoardState","isGlobalBoardWon","winnerBoard","includes","idxs","localSqIdx","localSqValue","getGlobalBoard","globalSquareIdx","localSquareIdx","prevMoveCount","obj","globalSquare","localSquare","setTimeout","startNewGame","sort","a","b","setItem","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.155c5fe9.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n* {\n  box-sizing: border-box;\n}\nhtml {\n  font-family: sans-serif;\n}\nbody {\n  padding: 0;\n  margin: 0;\n}\n\n#overlay-root {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  position: absolute;\n}\n`;","import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;","import styled from \"styled-components\";\n\nexport const LocalBoardCell = styled.div`\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  border: 1px solid black;\n  cursor: pointer;\n  color: ${({ val }) => (val === \"X\" ? \"#F78888\" : \"#006db6\")};\n  &:hover {\n    background: ${({ val, isClickable }) => (isClickable && (val !== \"X\" && val !== \"O\") ? \"#838383\" : \"\")};\n  }\n\n  @media (min-width: 620px) {\n    font-size: 38px;\n\n    @keyframes animatePlayer {\n    50% {\n      font-size: 250px;\n    }\n\n    100% {\n      font-size: 180px;\n      transform: rotateZ(360deg);\n    }\n  }\n  }\n`;","import {LocalBoardCell} from \"./LocalBoard.styled\";\n\nexport default function LocalBoard(props) {\n    const value = props.value ? (props.value === \"X\" ? \"X\" : \"O\") : \"\";\n    return (\n        <LocalBoardCell\n            val={value}\n            isClickable={props.isClickable}\n            className={`local-board`}\n            {...(props.isClickable && !props.value && {onClick: props.onClick})}\n        >\n            {props.value}\n        </LocalBoardCell>\n    );\n};","import styled from \"styled-components\";\n\nexport const StyledBoard = styled.div`\n  font-size: 10px;\n  @keyframes animatePlayer {\n    50% {\n      font-size: 190px;\n    }\n\n    100% {\n      font-size: 120px;\n      transform: rotateZ(360deg);\n    }\n  }\n  display: flex;\n  flex-direction: column;\n  border: 1px solid black;\n  padding: ${({ boardType }) => (boardType === \"global\" ? \"1em\" : \"\")};\n  position: relative;\n  width: ${({ boardType }) => (boardType === \"global\" ? \"90%\" : \"\")};\n  flex: ${({ boardType }) => (boardType === \"global\" ? \"\" : \"1\")};\n  background: ${({ wonBoard, isClickable }) => wonBoard ? \"#fade72\" : isClickable ? \"#b8b8b8\" : \"#f2f2f2\"};\n  aspect-ratio : 1 / 1;\n\n  &::before {\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    animation: animatePlayer 1s forwards;\n    z-index: 1;\n    content: ${({ wonBoard }) =>\n    wonBoard ? (wonBoard.winner === \"X\" ? \"'X'\" : \"'O'\") : \"\"};\n    color: ${({ wonBoard }) =>\n    wonBoard ? (wonBoard.winner === \"X\" ? \"#F78888\" : \"#006db6\") : \"\"};\n  }\n\n  @media (min-width: 620px) {\n    width: ${({ boardType }) => (boardType === \"global\" ? \"650px\" : \"\")};\n  }\n\n`;\n\nexport const BoardRow = styled.div`\n  display: flex;\n  flex: 1;\n`;","import {BoardRow} from \"./Board.styled\";\n\nexport function getBoardRows(board, size) {\n    let rows = [];\n    [...Array(size)].map((item, i) => {\n        let cols = [];\n        [...Array(size)].map((item, j) => {\n            cols = [...cols, board(i * size + j)];\n        })\n        rows = [...rows, <BoardRow>{cols}</BoardRow>];\n    })\n    return rows;\n}","import {StyledBoard} from \"./Board.styled\";\nimport {getBoardRows} from \"./BoardUtils\";\n\nexport default function Board({board, boardInfo, size}) {\n    return <StyledBoard\n        boardType={boardInfo?.type}\n        className={boardInfo?.type === 'global' ? 'global-board' : 'local-board'}\n        wonBoard={boardInfo.wonBoard || false}\n        isClickable={!!boardInfo?.isClickable}>\n        {getBoardRows(board, size)}\n    </StyledBoard>;\n};","import LocalBoard from \"../LocalBoard/LocalBoard\";\nimport Board from \"../Board\";\n\nexport default function GlobalBoard(props) {\n    function getLocalBoard(idx) {\n        return <LocalBoard\n            key={idx}\n            value={props?.localBoards?.[idx]}\n            isClickable={props.isClickable}\n            onClick={() => props.onClick(idx)}\n        />;\n    };\n\n    return <Board\n        board={(idx) => getLocalBoard(idx)}\n        boardInfo={{\n            type: \"local\",\n            wonBoard: props.isWon.length > 0 ? {winner: props.isWon[0].player } : false,\n            isClickable: props.isClickable || false\n        }}\n        size={props.size}\n    />;\n};","import styled from \"styled-components\";\n\nexport const StyledButton = styled.button`\n  font-size: inherit;\n  line-height: inherit;\n  border: none;\n  padding: 0.5em;\n  background: ${({ styles }) => styles && styles.bg ? styles.bg : \"transparent\"};\n  color: ${({ disabled, styles }) => disabled ? \"#7e7c7c\" : (styles && styles.color ? styles.color : \"#ffffff\")};\n  \n  cursor: pointer;\n  &:focus {\n      outline: none;\n  }\n  &:hover, &:active  {\n    opacity: ${({ disabled }) => disabled ? 1 : 0.7};\n  }\n`;","import {StyledButton} from './Button.styled'\n\nexport default function Button({styles, type = 'button', onClick, disabled = false, children}) {\n    return (\n        <StyledButton\n            styles={styles}\n            type={type}\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </StyledButton>\n    );\n};\n","import styled from \"styled-components\";\n\nexport const OuterContainer = styled.div`\n  font-size: 14px;\n  display: flex;\n  justify-content: center;\n  background: #0f70b8;\n  padding: 1em;\n  top: 0;\n  width: 100%;\n  position: relative;\n\n  @media (min-width: 620px) {\n    font-size: 26px;\n  }\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  @media (min-width: 620px) {\n    width: 800px;\n  }\n`;\nexport const NextPlayer = styled.div`\n  display: flex;\n  font-size: inherit;\n  color: #ffffff;\n\n  span {\n    position: relative;\n    margin-left: 0.4em;\n  }\n`;","import Button from \"../UI/Button/Button\";\nimport { OuterContainer, InnerContainer, NextPlayer } from \"./Header.styled\";\n\nexport default function Header(props) {\n  return (\n    <OuterContainer>\n      <InnerContainer>\n        <Button onClick={props.onNewGameClick}>\n          New Game\n        </Button>\n        <Button onClick={props.onHighScoresClick}>\n          High Scores\n        </Button>\n        <NextPlayer>\n          Player:<span>{props.player}</span>\n        </NextPlayer>\n      </InnerContainer>\n    </OuterContainer>\n  );\n};","import styled from \"styled-components\";\n\nexport const StyledModal = styled.div`\n  font-size: 14px;\n  background: white;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  border-radius: 0.5em;\n  position: relative;\n  width: 90%;\n  z-index: 100;\n  overflow: hidden;\n  @media (min-width: 620px) {\n    font-size: 20px;\n    width: 35em;\n}\n`;\n\nexport const ModalHeader = styled.header`\n  font-size: 14px;\n  padding: 0.4em 0.7692em;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  height: 3.077em;\n  line-height: 3.077em;\n  background: #0f70b8;\n  @media (min-width: 620px) {\n    font-size: 26px;\n}\n`;\nexport const ModalBody = styled.section`\n  font-weight: bold;\n  padding: 1em;\n`;\nexport const ModalFooter = styled.footer`\n  padding: 0 1em 1em 1em;\n  display: flex;\n  justify-content: flex-end;\n`;\nexport const ModalTitle = styled.div`\n  text-transform: ${({ hs }) => (hs ? \"uppercase\" : \"\")};\n  margin: 0;\n  color: white;\n  font-weight: bold;\n`;\nexport const ModalInputLabel = styled.label`\n  font-weight: bold;\n  margin-right: 1em;\n`;\nexport const ModalInput = styled.input`\n  font-size: inherit;\n  padding: 0.25em;\n`;\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  z-index: 10;\n  background: rgba(0, 0, 0, 0.75);\n`;\n\nexport const ModalBodyForm = styled.form`\n  display: flex;\n  align-items: center;\n`;","import styled from \"styled-components\";\n\nexport const HighScoresModalTable = styled.table`\n  width: 100%;\n  border-spacing: 0 0.5em;\n\n  thead {\n    text-align: left;\n    height: 1.5em;\n    color: #0084e6;\n    font-size: 14px;\n\n    tr th:first-child {\n      padding-left: 0.8em;\n    }\n    tr th:last-child {\n      text-align: center;\n    }\n\n    @media (min-width: 620px) {\n    font-size: 22px;\n}\n  }\n  tbody {\n    tr {\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n      line-height: 2em;\n      border-radius: 0.7em;\n      \n      td:first-child {\n        padding-left: 0.8em;\n        border-top-left-radius: 0.7em;\n        border-bottom-left-radius: 0.7em;\n      }\n      td:last-child {\n        text-align: center;\n        border-top-right-radius: 0.7em;\n        border-bottom-right-radius: 0.7em;\n      }\n    }\n  }\n`;","import styled from \"styled-components\";\n\nexport const StyledHighScoresModalTableRow = styled.tr`\n  background: ${({isNew}) => isNew ? \"#63b7f6\" : \"transparent\"};\n`;","import React from \"react\";\nimport {StyledHighScoresModalTableRow} from \"./HighScoresModalTableRow.style\";\n\nexport default function HighScoresModalTableRow({rank, name, score, isNew}) {\n  return (\n    <StyledHighScoresModalTableRow isNew={isNew}>\n      <td>{rank}</td>\n      <td>{name}</td>\n      <td>{score}</td>\n    </StyledHighScoresModalTableRow>\n  );\n};","import React from \"react\";\nimport {ModalBody} from \"../../UI/Modal/Modal.styled\";\nimport {HighScoresModalTable} from \"./HighScoresModal.styled\";\nimport HighScoresModalTableRow from \"./HighScoresModalTableRow\";\n\nexport function HighScoresModal({rows, newPlayer}) {\n    const addedPlayerIdx = rows.findIndex(player => {\n        return player.name === newPlayer.name && player.score === newPlayer.score;\n    });\n    const tableHeaders = (<thead>\n    <tr>\n        <th>#</th>\n        <th>Name</th>\n        <th>Score</th>\n    </tr>\n    </thead>)\n\n    const tableBody = <tbody>\n    {rows.map((player, idx) => {\n        return (\n            <HighScoresModalTableRow\n                key={idx}\n                rank={idx + 1}\n                name={player.name}\n                score={player.score}\n                isNew={addedPlayerIdx === idx}\n            />\n        );\n    })}\n    </tbody>\n\n\n    return (\n        <ModalBody>\n            <HighScoresModalTable>\n                {tableHeaders}\n                {tableBody}\n            </HighScoresModalTable>\n        </ModalBody>\n    );\n};\n\n","import {React, useState} from \"react\";\nimport {\n    StyledModal,\n    ModalHeader,\n    Backdrop,\n    ModalTitle,\n    ModalBody,\n    ModalFooter,\n    ModalInputLabel,\n    ModalInput,\n    ModalBodyForm\n} from \"./Modal.styled\";\nimport ReactDom from \"react-dom\";\nimport Button from \"../Button/Button\";\nimport {HighScoresModal} from \"../../Modals/HighScoresModal/HighScoresModal\";\n\nconst ModalOverlay = (props) => {\n    const [playerName, setPlayerName] = useState(\"\");\n    const [playerScore, setPlayerScore] = useState();\n\n    const nameChangeHandler = event => {\n        setPlayerName(event.target.value);\n    };\n    const submitHandler = event => {\n        event.preventDefault();\n        const playerToAdd = {name: playerName, score: props.modal.score};\n        setPlayerScore(props.modal.score);\n        props.onSubmitName(playerToAdd);\n    };\n\n    const isValidInput = () => {\n        return playerName.trim().length !== 0;\n    };\n\n    return (\n        <StyledModal>\n            <ModalHeader>\n                <ModalTitle hs={props.modal.type === \"hs\"}>{props.modal.header}</ModalTitle>\n                {props.modal.type === \"hs\" && (\n                    <Button type=\"button\" onClick={props.onClick}>\n                        X\n                    </Button>\n                )}\n            </ModalHeader>\n            {props.modal.type === \"hs\" && (\n                <HighScoresModal rows={props.modal.body} newPlayer={{name: playerName, score: playerScore}}/>\n            )}\n            {props.modal.type === \"d\" && (\n                <ModalBody>{props.modal.body}</ModalBody>\n            )}\n            {props.modal.type === \"w\" && (\n                <ModalBody>\n                    <ModalBodyForm onSubmit={submitHandler}>\n                        <ModalInputLabel htmlFor=\"name\">Your name:</ModalInputLabel>\n                        <ModalInput\n                            id=\"name\"\n                            type=\"text\"\n                            value={playerName}\n                            onChange={nameChangeHandler}\n                        />\n                        <Button\n                            type=\"submit\"\n                            styles={{color: \"#0f70b8\"}}\n                            disabled={!isValidInput()}\n                        >\n                            Submit\n                        </Button>\n                    </ModalBodyForm>\n                </ModalBody>\n            )}\n            {(props.modal.type === \"d\" || props.modal.type === \"w\") && (\n                <ModalFooter>\n                    <Button\n                        type=\"button\"\n                        onClick={props.onNewGameClick}\n                        styles={{bg: \"#0f70b8\"}}\n                    >\n                        New Game\n                    </Button>\n                </ModalFooter>\n            )}\n        </StyledModal>\n    );\n};\nconst Modal = props => {\n    return (\n        <>\n            {ReactDom.createPortal(\n                <Backdrop></Backdrop>,\n                document.getElementById(\"backdrop-root\")\n            )}\n            {ReactDom.createPortal(\n                <ModalOverlay\n                    modal={props.modal}\n                    onClick={props.onClick}\n                    onNewGameClick={props.onNewGameClick}\n                    onSubmitName={(player) => props.onSubmitName(player)}\n                />,\n                document.getElementById(\"overlay-root\")\n            )}\n        </>\n    );\n};\n\nexport default Modal;\n","import styled from \"styled-components\";\n\nexport const BoardContainer = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n`;","export const highScoresMockData = [\n    {name: \"El Professor\", score: 15},\n    {name: \"Harley Quinn\", score: 12},\n    {name: \"Messi\", score: 7},\n    {name: \"Rick and Morty\", score: 5},\n    {name: \"LeBron\", score: 30},\n];","import {React, useState, useEffect} from \"react\";\nimport GlobalBoard from \"../Board/GlobalBoard/GlobalBoard\";\nimport Header from \"../Header/Header\";\nimport Modal from \"../UI/Modal/Modal\";\nimport Board from \"../Board/Board\";\nimport {BoardContainer} from \"./Game.styled\";\nimport {getHighScores, getWinningPatterns} from \"./Game.utils\";\n\n\nexport default function Game(props) {\n    const [board, setBoard] = useState([]);\n    const [player, setPlayer] = useState(\"X\");\n    const [clickedBoards, setClickedBoards] = useState(null);\n    const [playableBoards, setPlayableBoards] = useState([]);\n    const [unfilledBoards, setUnfilledBoards] = useState([]);\n    const [wonBoards, setWonBoards] = useState([]);\n    const [modal, setModal] = useState(null);\n    const [movesCount, setMovesCount] = useState({X: 0, O: 0});\n    const [highScores, setHighScores] = useState(null);\n\n    const winningPatterns = getWinningPatterns();\n\n    function initBoard() {\n        return [...Array(Math.pow(props.size, 2))].map(() => Array(Math.pow(props.size, 2)).fill(null));\n    }\n\n    function getBoardIdxs() {\n        return [...Array(Math.pow(props.size, 2)).keys()];\n    }\n\n    useEffect(() => {\n        setBoard(initBoard());\n        setHighScores(getHighScores())\n        setPlayableBoards(getBoardIdxs())\n        setUnfilledBoards(getBoardIdxs())\n    }, []);\n\n    useEffect(() => {\n        if (clickedBoards) {\n            if (checkLocalWin(clickedBoards[0])) {\n                if (unfilledBoards.length === 1) {\n                    setDraw();\n                } else {\n                    return;\n                }\n            }\n            if (unfilledBoards.length === 1 && isLocalBoardFull(clickedBoards[0])) {\n                setDraw();\n            }\n            setAvailableBoards();\n        }\n    }, [board]);\n\n    useEffect(() => {\n        if (wonBoards.length > 2) {\n            if (checkGlobalWin()) {\n                return;\n            }\n        }\n        if (wonBoards.length > 0) {\n            setAvailableBoards();\n        }\n    }, [wonBoards]);\n\n    useEffect(() => {\n        if (highScores) {\n            setLocalStorageHighScores();\n            if (modal) {\n                setModal({\n                    type: \"hs\",\n                    isNewGame: true,\n                    header: \"highScores\",\n                    body: highScores\n                });\n            }\n        }\n    }, [highScores]);\n\n    const handleClick = (globalSqIdx, localSqIdx) => {\n        setClickedBoards([globalSqIdx, localSqIdx]);\n        setMovesCount(prevMoveCount => {\n            const obj = {...prevMoveCount};\n            obj[player]++;\n            return obj;\n        });\n\n        setBoard(\n            board.map((globalSquare, globalSquareIdx) => {\n                return globalSquare.map((localSquare, localSquareIdx) => {\n                    if (\n                        globalSquareIdx === globalSqIdx &&\n                        localSqIdx === localSquareIdx &&\n                        localSquare === null\n                    ) {\n                        return player;\n                    }\n                    return localSquare;\n                });\n            })\n        );\n    };\n    const checkLocalWin = globalSqIdx => {\n        let isWinningPattern = false;\n        winningPatterns.forEach(pattern => {\n            if (pattern.every(idx => board[globalSqIdx][idx] === player)) {\n                isWinningPattern = true;\n            }\n        });\n        if (isWinningPattern) {\n            setWonBoards([...wonBoards, {idx: clickedBoards[0], player}]);\n        }\n        return isWinningPattern;\n    };\n    const checkGlobalWin = () => {\n        let isWinningPattern = false;\n        winningPatterns.forEach(pattern => {\n            if (\n                pattern.every(idx =>\n                    wonBoards.some(board => {\n                        return board.idx === idx && board.player === player;\n                    })\n                )\n            ) {\n                isWinningPattern = true;\n            }\n        });\n        if (isWinningPattern) setWin();\n        return isWinningPattern;\n    };\n\n    const setAvailableBoards = () => {\n        let availableIdxs = [...unfilledBoards];\n        if (isLocalBoardFull(clickedBoards[0])) {\n            availableIdxs = availableIdxs.filter(aIdx => {\n                return clickedBoards[0] !== aIdx;\n            });\n            updateBoardState(availableIdxs);\n        }\n\n        if (isGlobalBoardWon(clickedBoards[1])) {\n            availableIdxs = availableIdxs.filter(idx => {\n                return wonBoards.every(winnerBoard => {\n                    return winnerBoard.idx !== idx;\n                });\n            });\n            updateBoardState(availableIdxs);\n        } else {\n            availableIdxs = !availableIdxs.includes(clickedBoards[1])\n                ? availableIdxs\n                : [clickedBoards[1]];\n            setPlayableBoards(availableIdxs);\n        }\n        setPlayer(player === \"X\" ? \"O\" : \"X\");\n    };\n    const updateBoardState = idxs => {\n        setUnfilledBoards(idxs);\n        setPlayableBoards(idxs);\n    };\n\n    const isLocalBoardFull = localSqIdx => {\n        return board[localSqIdx].every(localSqValue => localSqValue !== null);\n    };\n    const isGlobalBoardWon = idx => {\n        return wonBoards.some(board => board.idx === idx);\n    };\n\n    function getGlobalBoard(globalSquareIdx) {\n        return (\n            <GlobalBoard\n                key={globalSquareIdx}\n                className={`global-board`}\n                size={props.size}\n                localBoards={board?.[globalSquareIdx]}\n                isWon={wonBoards.filter(board => board.idx === globalSquareIdx)}\n                isClickable={playableBoards.includes(globalSquareIdx)}\n                onClick={localSquareIdx => handleClick(globalSquareIdx, localSquareIdx)}\n            />\n        );\n    }\n\n    const setDraw = () => {\n        setTimeout(() => {\n            setModal({\n                type: \"d\",\n                header: \"It's a Draw!\",\n                body: \"Better luck next time...\"\n            });\n        }, 400)\n    };\n    const setWin = () => {\n        setTimeout(() => {\n            setModal({\n                type: \"w\",\n                header: `Congrats! Player ${player} won!`,\n                score: movesCount[`${player}`]\n            })\n        }, 400)\n    };\n    const showHighScores = () => {\n        setModal({\n            type: \"hs\",\n            header: \"highScores\",\n            body: highScores\n        });\n    };\n    const updateHighScores = newPlayer => {\n        setHighScores([...highScores, newPlayer]);\n    };\n    const startNewGame = () => {\n        setBoard(initBoard());\n        setPlayer(\"X\");\n        setClickedBoards(null);\n        setWonBoards([]);\n        setModal(null);\n        setMovesCount({X: 0, O: 0});\n        setPlayableBoards(getBoardIdxs());\n        setUnfilledBoards(getBoardIdxs());\n    };\n\n    const setLocalStorageHighScores = () => {\n        highScores.sort((a, b) => (a.score > b.score ? 1 : -1));\n        localStorage.setItem(\"highScores\", JSON.stringify(highScores));\n    };\n    const modalHandler = () => {\n        setModal(null);\n    };\n    return (\n        <>\n            <Header\n                onNewGameClick={startNewGame}\n                onHighScoresClick={showHighScores}\n                player={player}\n            />\n            <BoardContainer>\n                <Board\n                    board={(idx) => getGlobalBoard(idx)}\n                    boardInfo={{type: \"global\"}}\n                    size={props.size}\n                />\n            </BoardContainer>\n            {modal && (\n                <Modal\n                    modal={modal}\n                    onClick={modal.isNewGame ? startNewGame : modalHandler}\n                    onSubmitName={player => updateHighScores(player)}\n                    onNewGameClick={startNewGame}\n                />\n            )}\n        </>\n    );\n}","import {boardSize} from \"../../Utils/Constants\";\nimport {highScoresMockData} from \"./Game.constants\";\n\nexport function getWinningPatterns() {\n    let patterns = [];\n    let mainDiagonalPattern = [];\n    let antiDiagonalPattern = [];\n\n    for (let i = 0; i < boardSize; i++) {\n        let rowPattern = [];\n        let colPattern = [];\n        mainDiagonalPattern.push(i + i * boardSize);\n        antiDiagonalPattern.push(boardSize * (i + 1) - (i + 1));\n        for (let j = 0; j < boardSize; j++) {\n            rowPattern.push(i * boardSize + j);\n            colPattern.push(i + j * boardSize);\n        }\n        patterns.push(rowPattern, colPattern);\n    }\n    patterns.push(mainDiagonalPattern, antiDiagonalPattern);\n    return patterns;\n};\n\nexport function getHighScores() {\n    return JSON.parse(localStorage.getItem('highScores')) || highScoresMockData;\n};","export const boardSize = 3;\n\nexport const sizes = {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n    '2xl': '1536px',\n}","import { GlobalStyles } from \"./Assets/Styles/Global.styled\";\nimport { AppContainer} from \"./Assets/Styles/AppContainer.styled\";\nimport {boardSize} from \"./Utils/Constants\";\nimport Game from \"./Components/Game/Game\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <AppContainer className=\"App\">\n        <Game size={boardSize} />\n      </AppContainer>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();"],"sourceRoot":""}